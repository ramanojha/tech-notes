David Mehler
https://www.youtube.com/watch?v=uR6G2v_WsRA&list=PUEoaojfEY_6L5TWWjIn9t9Q&index=6
https://www.youtube.com/watch?v=FyAAIHHClqI&list=PUEoaojfEY_6L5TWWjIn9t9Q&index=4
https://www.youtube.com/watch?v=Gg4bLk8cGNo&list=PUEoaojfEY_6L5TWWjIn9t9Q&index=15

// Adding removing and commiting
[Working Tree  	------------------>  Staging Area  	------------------->  	History]
				git init
				git add .							git commit -m
				git add f1							git commit 
				git rm f1
[Working Tree  	------------> git commit -a -m "Commit Message" ------->  	History]   ===> TO BYPASS Staging or To stage and commit 

// for staus, and commit history
[Working Tree  	------------------>  Staging Area  	------------------->  	History]
				git status													git log
																			git log -p  - what was changed
																			git log f1
																			git log --oneline
																			git log --all --decorate --oneline --graph
// for difference																			
[Working Tree  	------------------>  Staging Area  	------------------->  	History]
				git diff							git diff -- staged	
							

// for Undoing			
[Working Tree  	<------------------  Staging Area  	<-------------------  	History] <----------------------------------repository]
				git checkout --S1 					git reset HEAD S1 													1. git revert HEAD ~2
													git checkout <commitHash> --S2  									2. git push
																														1. git reset --hard 71c27777543ccfcb0376dcdd8f6777df055ef479
																														2. git push --force
																														
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
If EXISTING WORKSPACE IS MODIFIED then SWITCH OVER TO NEW BRANCH IS NOT ALLOWED

// for stashing																			
[Working Tree  	---------------------------------------->  Stash Area.
				git stash save "commit message"
				git stash list
				git stash save "Worked on Function."
				git stash list
				git stash list -p  ==> to check what are the changes done.
				git stash apply stash@{0} --- stash{0} is not deleted from stash list.
				git stash pop - for latest --- stash{0} is deleted from from list
				git stash drop stash@{0} -- it will drop the stash
				git stash clear
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Vim commmand 
vi file1  - Opens up then :	wq! :q!
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=FyAAIHHClqI&list=PUEoaojfEY_6L5TWWjIn9t9Q&index=4

git branch branchName  -- create branch
git branch -b branchName -- create and checkout(switch) branch.
git branch   -- shows all branch
git checkout branch ---- To swtich new branch

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Two type of merge -
1. Fast forward merge
git merge branchname 
	master --------------branch1  [Fast forward]
				|			git checkout master
				|			git diff master..branch1    ===> Shows change if branch1 is merged into master.
				|			git merge branch1    ====> branch1 is merged into master
				|			
				|			git branch --merged  ===> Shows which branch is already merged with current master branch
				|
				|			git branch -d branch1  ====> branch1 is deleted.
				|
				|--------branch2
							
							git branch -d branch2 ===> Since no merge is done with Master, Hence -d won't allow to delete the branch.
							git branch -D branch2 ===> -D WILL DELETE THE BRANCH, WITHOUT CARING IF IT HAS MERGED OR NOT.
				
				
2. Three way merge

2.1	
		master/branch2/branch1
		|
		|\ 
		| \
		|  \ 	2. Now master to branch1 Not straight forward as there was megre with master
		|	\	so. it will be a 3 way merge called recursive merge. it will check commit 3,1,2  sequentially.
		|	 \	   git merege branch1.  Hence it will be recursive megre.
		|	  \
		|	   \
		|		\
		|		 \
		|		  \
		|Not Direct\
(2)branch1<---------(3)branch2/master
		|		  /
		|		 /
	up	|    up /
		|	   / 1. master to branch2 (Fast forward merge)
		|	  /	 	git checkout master
		|	 /      git merge branch2
		|	/	 
		|  / 
		| /
		|/
		|
		|
	master (1)

2.2 
		When there will be conflicts, it becomes as 3 way commit, we have to resolve explicitly.
		

Detached head state
If we want to see if how our files looked at a perticular CS.
So 
git checkout master   ===> HEAD POINTER and Master are sync.
git checkout <commitedHash> --- HEAD POINTER is at commitedHash. === Hence this position is called DETACHED HEAD.
So to deal with detached head.
1. git checkout master ===> HEAD POINTER and Master are sync.
or
2.
git checkout master
git checkout master   ===> HEAD POINTER and Master are sync.
git checkout <commitedHash> --- HEAD POINTER is at commitedHash. === Hence this position is called DETACHED HEAD.
git branch stage  ====> creating new branch 'stage' will be created start from commited hash.
git checkout stage ====> Now Head pointer will be attached with the branch. This can be seen in commit logs (HEAD -> stage)





								
																														